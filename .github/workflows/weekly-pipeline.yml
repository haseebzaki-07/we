name: WeQuo Weekly Pipeline

on:
  schedule:
    # Run every Monday at 6:00 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch: # Allow manual trigger
    inputs:
      force_run:
        description: 'Force run even if recent data exists'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment variables
      run: |
        echo "FRED_API_KEY=${{ secrets.FRED_API_KEY }}" >> $GITHUB_ENV
        echo "ALPHA_VANTAGE_API_KEY=${{ secrets.ALPHA_VANTAGE_API_KEY }}" >> $GITHUB_ENV
        echo "WORLD_BANK_API_KEY=${{ secrets.WORLD_BANK_API_KEY }}" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
        
    - name: Run weekly data pipeline
      run: |
        cd wequo
        python scripts/run_weekly.py
        
    - name: Check pipeline output
      run: |
        cd wequo
        ls -la data/output/
        # Get today's date in YYYY-MM-DD format
        TODAY=$(date +%Y-%m-%d)
        if [ -d "data/output/$TODAY" ]; then
          echo "‚úÖ Pipeline completed successfully for $TODAY"
          ls -la "data/output/$TODAY/"
        else
          echo "‚ùå Pipeline output directory not found"
          exit 1
        fi
        
    - name: Upload pipeline artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: weekly-data-package-${{ github.run_number }}
        path: |
          wequo/data/output/
          !wequo/data/output/**/*.pyc
        retention-days: 90
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "::error::WeQuo pipeline failed. Check logs and data sources."
        
    - name: Generate summary
      if: success()
      run: |
        cd wequo
        TODAY=$(date +%Y-%m-%d)
        if [ -f "data/output/$TODAY/package_summary.json" ]; then
          echo "## üìä WeQuo Pipeline Summary - $TODAY" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat > temp_summary.py << 'EOF'
        import json
        with open('data/output/' + '$TODAY' + '/package_summary.json') as f:
            data = json.load(f)
            sources = ', '.join(data.get('sources', []))
            print(f"**Sources processed:** {sources}")
            fred_data = data.get('latest_values', {}).get('fred', [])
            print(f"**Total data points:** {len(fred_data)}")
            if 'analytics' in data:
                analytics = data['analytics']
                top_deltas = analytics.get('top_deltas', [])
                anomalies = analytics.get('anomalies', [])
                trends = analytics.get('trends', [])
                print(f"**Top deltas:** {len(top_deltas)}")
                print(f"**Anomalies detected:** {len(anomalies)}")
                print(f"**Trends analyzed:** {len(trends)}")
        EOF
          python temp_summary.py >> $GITHUB_STEP_SUMMARY
          rm temp_summary.py
        fi

  health-check:
    runs-on: ubuntu-latest
    needs: run-pipeline
    if: always()
    
    steps:
    - name: Check pipeline health
      run: |
        if [ "${{ needs.run-pipeline.result }}" == "success" ]; then
          echo "‚úÖ Pipeline completed successfully"
        else
          echo "‚ùå Pipeline failed or was cancelled"
          echo "::error::Weekly pipeline health check failed"
        fi